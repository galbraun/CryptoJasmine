			/////// GAL AND SHANI PROJECT /////////////////////////			
			if (cmd.cmd_type == READ && cmd.lba == 96) {
				UINT32 sect_offset  = cmd.lba % SECTORS_PER_PAGE;
				strcpy(messageToUser,"NOT AUTHENTICATEDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccccccccccccccccccccccccccddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
				uart_printf("message is - %s\n",messageToUser);
				int i;
				UINT32 next_read_buf_id = (g_ftl_read_buf_id + 1) % NUM_RD_BUFFERS;
				
				#if OPTION_FTL_TEST == 0
				while (next_read_buf_id == GETREG(SATA_RBUF_PTR));	// wait if the read buffer is full (slow host)
				#endif

				for (  i=0; i<BYTES_PER_PAGE ; i++){								
					write_dram_32(RD_BUF_PTR(g_ftl_read_buf_id)+i, "A");
				}

				
				
				flash_finish();
				SETREG(BM_STACK_RDSET, next_read_buf_id);	// change bm_read_limit
				SETREG(BM_STACK_RESET, 0x02);				// change bm_read_limit
				g_ftl_read_buf_id = next_read_buf_id;
				
//				int j;
//				for ( i=0; i<NUM_RD_BUFFERS;i++){
//					uart_printf("this is buffer %d",i);
//					for ( j=0; j<BYTES_PER_PAGE; j++ ){
//						char ch = (char)read_dram_8(RD_BUF_PTR(i)+j);
//						if (ch=="X"){
//							uart_printf("in i - %ds and j- %d %c%c%c%c%c",i,j,(char)read_dram_8(RD_BUF_PTR(i)+j),(char)read_dram_8(RD_BUF_PTR(i)+j+1),(char)read_dram_8(RD_BUF_PTR(i)+j+2),(char)read_dram_8(RD_BUF_PTR(i)+j+3),(char)read_dram_8(RD_BUF_PTR(i)+j+4));
//						}
//					}
//				}
				
/*
				while (1)
				{
					UINT32 sata_id = GETREG(SATA_RBUF_PTR);

					if (g_ftl_read_buf_id != sata_id)
						break;
				}
*/
				continue;
			}
			
//			if (cmd.cmd_type == READ && cmd.lba == 96){
//				isAuthenticated = 0;
//			}
			/////////////////////////////////////////////////////











				/////// GAL AND SHANI PROJECT /////////////////////////
				if (!isAuthenticated){
					continue;
					UINT32 sect_offset  = cmd.lba % SECTORS_PER_PAGE;
					uart_printf("NOT AUTHENTICATED!!!!!!");
					int i;
					UINT32 next_read_buf_id;
					
					switch (messageStatus) {
						case MESSAGE_CREATED:
							next_read_buf_id = (g_ftl_read_buf_id + 1) % NUM_RD_BUFFERS;
							
							#if OPTION_FTL_TEST == 0
							while (next_read_buf_id == GETREG(SATA_RBUF_PTR));	// wait if the read buffer is full (slow host)
							#endif

							// fix bug @ v.1.0.6
							// Send 0xFF...FF to host when the host request to read the sector that has never been written.
							// In old version, for example, if the host request to read unwritten sector 0 after programming in sector 1, Jasmine would send 0x00...00 to host.
							// However, if the host already wrote to sector 1, Jasmine would send 0xFF...FF to host when host request to read sector 0. (ftl_read() in ftl_xxx/ftl.c)
							
							for (  i=0; i<BYTES_PER_SECTOR*cmd.sector_count && i<sizeof(messageToUser) ; i++){								
								write_dram_8(RD_BUF_PTR(g_ftl_read_buf_id)+(sect_offset*BYTES_PER_SECTOR)+i, messageToUser[i]);
							}

							flash_finish();
							SETREG(BM_STACK_RDSET, next_read_buf_id);	// change bm_read_limit
							SETREG(BM_STACK_RESET, 0x02);				// change bm_read_limit
							g_ftl_read_buf_id = next_read_buf_id;
							
							messageStatus = MESSAGE_HAS_BEEN_READ;
						break;
						case MESSAGE_INVALID_STATE:
							uart_printf("problem with message");
						break;
					}
					uart_printf("read for authentication");
					continue;
				}

				////////////////////////////////////////////////////////



/////// GAL AND SHANI PROJECT /////////////////////////
				if ( cmd.lba == 100){
					continue;
					if (!isAuthenticated){
						UINT32 sect_offset  = cmd.lba % SECTORS_PER_PAGE;
						char message[BYTES_PER_SECTOR] = {0};
						int i;
						for (  i=0; i<BYTES_PER_SECTOR ; i++){
							char ch = (char)read_dram_8(WR_BUF_PTR(g_ftl_write_buf_id)+(sect_offset*BYTES_PER_SECTOR)+i);
							if (ch==0){
								break;
							}
							message[i]=ch;
						}
						message[i+1]="\0";					
										
						authentication(message);
					}
					
					continue;
				}
				////////////////////////////////////////////////////////